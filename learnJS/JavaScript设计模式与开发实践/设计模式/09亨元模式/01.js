/*
享元模式的核心是运用共享技术来有效支持大量细粒度的对象。
享元模式要求将对象的属性划分为内部状态与外部状态（状态在这里通常指属性）。
划分内部状态和外部状态的关键：
内部状态储存于对象内部。
内部状态可以被一些对象共享。
内部状态独立于具体的场景，通常不会改变。
外部状态取决于具体的场景，并根据场景而变化，外部状态不能被共享。

使用亨元模式
一个程序中使用了大量的相似对象。
由于使用了大量对象，造成很大的内存开销。
对象的大多数状态都可以变为外部状态。
剥离出对象的外部状态之后，可以用相对较少的共享对象取代大量对象。

享元模式是为解决性能问题而生的模式，这跟大部分模式的诞生原因都不一样。
在一个存在大量相似对象的系统中，享元模式可以很好地解决大量对象带来的性能问题。
 */